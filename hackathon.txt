In our recent group hackathon, my group and I created a web application that allows a user to select their meals in a given day from a dropdown menu. The app then records the input in two pie charts, as well as a table. The first pie chart shows how many calories are in each food item. The second pie chart displays the proportions of each meal, so that the user can easily take note of which meals the majority of one's calories are coming from.
During the production of this application, my group and I decided to pair program from a single computer and slack the project at the end of the day to everyone else. This allowed us to keep the app completely intact and eliminated the potential for overriding any essential code.
In future projects, especially more complex ones, it may make sense to break up the coding based on front and back-end and instead sync the multiple parts together. However, for this hackathon, I believe we made the right decision in avoiding unnecessary complications.
Our biggest concern, going into this project, was not having enough time to implement all of our ideas. In fact, there were many features that we never ended up adding to our health-based application. We realized early on that many of our initial ideas were more complicated than we had originally expected. Deciding as a team, which features to begin with and which ones to put on the back-burner was a valuable learning experience. We learned how to negotiate with one another and come to logical conclusions that benefited the team as a whole.
Overall, the experience helped me to realise my current strengths and weaknesses in development. Most of our issues along the way involved the server-side and database for our app. For me, these were the most difficult problems to recognize and solve. As a result, I now know that these aspects, along with API's, (which we did not use for this app), are the things that I will have to study and pay attention to most when developing my final project.